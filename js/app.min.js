"use strict";(()=>{const e=document.querySelector("#placement__img-map-wrapper-js"),t=()=>{const e=new google.maps.Map(document.getElementById("map"),{zoom:17,center:{lat:59.93899,lng:30.32145}});new google.maps.Marker({position:{lat:59.938628,lng:30.3238},map:e,icon:"img/map-marker.png"})};if(e){const n=document.createElement("div");n.setAttribute("id","map"),n.setAttribute("class","placement__map"),e.parentElement.replaceChild(n,e);const r=document.createElement("script");r.src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDdxiZ8JD-Awc3VOchAbkcA54-XHZJYkGY&callback=initMap",r.defer=!0,window.initMap=t,document.head.appendChild(r)}})(),(()=>{const e="ArrowLeft",t="ArrowRight",n=document.querySelector("#filter-panel__cost-title-js"),r=document.querySelector("#cost-min-js"),i=document.querySelector("#cost-max-js");if(n&&r&&i){const o=(e=>{const t=document.createElement("div");return t.innerHTML=e,t.firstElementChild})('\n      <div class="filter-panel__cost-range">\n        <div class="filter-panel__cost-range-line">\n          <div\n            class="filter-panel__cost-point filter-panel__cost-point--min"\n            tabindex="0"\n            id="filter-panel__cost-point-min-js"\n            aria-label="Изменить минимальную стоимость"\n          ></div>\n          <div\n            class="filter-panel__cost-point filter-panel__cost-point--max"\n            tabindex="0"\n            id="filter-panel__cost-point-max-js"\n            aria-label="Изменить максимальную стоимость"\n          ></div>\n        </div>\n      </div>\n    '),s=o.querySelector(".filter-panel__cost-range-line"),l=o.querySelector("#filter-panel__cost-point-min-js"),a=o.querySelector("#filter-panel__cost-point-max-js"),c={MIN:{propName:"--min-percent",limitCostValue:0,limitPropValue:0,initPropValue:0,input:r,point:l},MAX:{propName:"--max-percent",limitCostValue:22059,limitPropValue:100,initPropValue:68,input:i,point:a}},p=e=>parseFloat(o.style.getPropertyValue(e.propName).split("%")[0]),u=e=>{const t=parseInt(e.input.value,10);return Number.isNaN(t)?e.limitPropValue:t/c.MAX.limitCostValue*c.MAX.limitPropValue},d=e=>{const t=p(e);return Math.round(c.MAX.limitCostValue*t/c.MAX.limitPropValue)},m=e=>{const t=d(e);parseFloat(e.input.value)!==t&&(e.input.value=t)},v=(e,t)=>{o.style.setProperty(e.propName,t+"%"),m(e)},_=(e,t)=>{(t=t||u(e))<c.MIN.limitPropValue?t=c.MIN.limitPropValue:t>c.MAX.limitPropValue&&(t=c.MAX.limitPropValue),e===c.MIN&&t>p(c.MAX)?v(c.MAX,t):e===c.MAX&&t<p(c.MIN)&&v(c.MIN,t),v(e,t)},L=e=>{e.target===c.MIN.input?_(c.MIN):_(c.MAX)},E=e=>{const t=e.target===c.MIN.point?c.MIN:c.MAX,n=s.clientWidth,r=s.getBoundingClientRect().left,i=e=>{const i=Math.round((e.x-r)/n*100);_(t,i)},o=()=>{document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",o)};document.addEventListener("mousemove",i),document.addEventListener("mouseup",o)},y=n=>{const r=n.target===c.MIN.point?c.MIN:c.MAX;n.code===e?_(r,p(r)-1):n.code===t&&_(r,p(r)+1)};v(c.MIN,c.MIN.initPropValue),v(c.MAX,c.MAX.initPropValue),r.addEventListener("input",L),i.addEventListener("input",L),l.addEventListener("mousedown",E),a.addEventListener("mousedown",E),l.addEventListener("keydown",y),a.addEventListener("keydown",y),n.after(o)}})(),(()=>{const e="popup--opened",t="popup--error",n="popup__input--error",r=document.querySelector("#placement__description-button-js"),i=document.querySelector("#popup-js"),o=i.querySelector("#popup__form-js"),s=i.querySelector("#popup__close-button-js"),l=i.querySelector("#popup__submit-js"),a=i.querySelector("#popup-field-name-js"),c=i.querySelector("#popup-field-email-js"),p=i.querySelector("#popup-field-letter-js"),u={NAME:"userName",EMAIL:"userEmail"},d=e=>{"Escape"===e.code&&v()},m=t=>{t.preventDefault(),i.classList.add(e),a.value=localStorage.getItem(u.NAME),c.value=localStorage.getItem(u.EMAIL),s.addEventListener("click",v),l.addEventListener("click",_),a.addEventListener("input",y),c.addEventListener("input",y),p.addEventListener("input",y),document.addEventListener("keydown",d),a.focus()},v=n=>{n&&n.preventDefault(),i.classList.remove(e),i.classList.remove(t),s.removeEventListener("click",v),l.removeEventListener("click",_),a.removeEventListener("input",y),c.removeEventListener("input",y),p.removeEventListener("input",y),document.removeEventListener("keydown",d),r.focus()},_=e=>{e.preventDefault(),i.classList.remove(t),E()&&fetch("https://echo.htmlacademy.ru/",{method:"POST",body:new FormData(o)}).then((e=>{if(!e.ok)throw i.classList.add(t),new Error(`_${e.status}: ${e.statusText}`);return localStorage.setItem(u.NAME,a.value),localStorage.setItem(u.EMAIL,c.value),a.value="",c.value="",p.value="",v(),e})).catch((e=>{throw i.classList.add(t),e}))},L=e=>e.value.length>0?(e.setCustomValidity(""),!0):(e.setCustomValidity("Обязательное поле для заполнения"),e.classList.add(n),setTimeout((()=>{e.classList.remove(n)}),500),!1),E=()=>L(a)&&L(c)&&L(p),y=e=>{L(e.target)};i&&r&&s&&l&&(i.classList.remove("popup--no-js"),r.addEventListener("click",m),a.required=!1,c.required=!1,p.required=!1)})(),(()=>{const e=document.querySelector(".principles");if(e){const t="principles__slide--active",n="principles__control-button--active",r=e=>{const t=document.createElement("div");return t.innerHTML=e,t.firstChild},i=(i,o)=>{const s=r(`<li>\n          <button class="principles__control-button  ${o?"":n}" type="button">\n            <span class="visually-hidden">Принцип ${o+1}</span>\n          </button>\n        </li>`);return s.firstElementChild.addEventListener("click",(r=>{const o=e.querySelector("."+t);o!==i&&(e.querySelector("."+n).classList.remove(n),o.classList.remove(t),i.classList.add(t),r.target.classList.add(n))})),o||i.classList.add(t),s},o=e.querySelector("#principles__slider-js"),s=e.querySelectorAll(".principles__slide"),l=r('<ul class="principles__control list-reset"></ul>');s.forEach(((e,t)=>{e.classList.remove("principles__slide--no-js"),l.append(i(e,t))})),o.after(l)}})(),(()=>{const e=Array.from(document.querySelectorAll(".sort-panel__type")),t=Array.from(document.querySelectorAll(".sort-panel__direction")),n=n=>{const r=n.target;let i="",o=[];e.includes(r)?(i="sort-panel__type--active",o=e):(i="sort-panel__direction--active",o=t),o.filter((e=>e.classList.contains(i))).forEach((e=>e.classList.remove(i))),r.classList.add(i)};e.forEach((e=>e.addEventListener("click",n))),t.forEach((e=>e.addEventListener("click",n)))})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
